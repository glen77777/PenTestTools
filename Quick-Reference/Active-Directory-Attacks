ENUMERATION:<<<

NET.EXE:
net user
net user /domain
net user admin /domain
net group /domain

POWERSHELL:

LDAP://HostName[:PortNumber][/DistinguishedName]

TO AUTOMATE THE PROCESS OF GATHERING WE CAN RUN

$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

$PDC = ($domainObj.PdcRoleOwner).Name

$SearchString = "LDAP://"

$SearchString += $PDC + "/"

$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"

$SearchString += $DistinguishedName

$SearchString

$Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)

$objDomain = NewObject System.DirectoryServices.DirectoryEntry

$Searcher.SearchRoot = $objDomain

$Searcher.filter="samAccountType=805306368"

$Result = $Searcher.FindAll()

Foreach($obj in $Result)
{
    Foreach($prop in $obj.Properties)
    {
        $prop
    }
    
    Write-Host "------------------------------"
}


OTHER SAM ACCOUNT TYPES:<<
Case 0
Return "SAM_DOMAIN_OBJECT"
Case 268435456
Return "SAM_GROUP_OBJECT"
Case 268435457
Return "SAM_NON_SECURITY_GROUP_OBJECT"
Case 536870912
Return "SAM_ALIAS_OBJECT"
Case 536870913
Return "SAM_NON_SECURITY_ALIAS_OBJECT"
Case 805306368
Return "SAM_NORMAL_USER_ACCOUNT"
Case 805306369
Return "SAM_MACHINE_ACCOUNT"
Case 805306370
Return "SAM_TRUST_ACCOUNT"
Case 1073741824
Return "SAM_APP_BASIC_GROUP"
Case 1073741825
Return "SAM_APP_QUERY_GROUP"
Case 2147483647
Return "SAM_ACCOUNT_TYPE_MAX"

YOU CAN ALSO CHANGE THE SCRIPT AS FOLLOWS TO LIST GROUP NAMES


$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

$PDC = ($domainObj.PdcRoleOwner).Name

$SearchString = "LDAP://"

$SearchString += $PDC + "/"

$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"

$SearchString += $DistinguishedName

$SearchString

$Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)

$objDomain = NewObject System.DirectoryServices.DirectoryEntry

$Searcher.SearchRoot = $objDomain

$Searcher.filter="(objectClass=Group)"

$Result = $Searcher.FindAll()

Foreach($obj in $Result)
{
    $obj.Properties.name
}


AND IF YOU FIND A GROUP THAT IS INTERESTING


$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

$PDC = ($domainObj.PdcRoleOwner).Name

$SearchString = "LDAP://"

$SearchString += $PDC + "/"

$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"

$SearchString += $DistinguishedName

$SearchString

$Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)

$objDomain = NewObject System.DirectoryServices.DirectoryEntry

$Searcher.SearchRoot = $objDomain

$Searcher.filter="(name=GROUP)"

$Result = $Searcher.FindAll()

Foreach($obj in $Result)
{
    $obj.Properties.member
}



ENUMERATING LOGGED IN USERS:<<<<<<<<<<<<<<<<<<<

GRAB POWERVIEW

RUN
Import-Module .\PowerView.ps1

THEN TRY
Get-NetLoggedon -ComputerName clientcomp
AND 
Get-NetSession -ComputerName LOGONSERVERNAME

ENUMERATING THROUGH SERVICE PRINCIPAL NAMES:<<<<<<<<<

$domainObj = [System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()

$PDC = ($domainObj.PdcRoleOwner).Name

$SearchString = "LDAP://"

$SearchString += $PDC + "/"

$DistinguishedName = "DC=$($domainObj.Name.Replace('.', ',DC='))"

$SearchString += $DistinguishedName

$SearchString

$Searcher = New-Object System.DirectoryServices.DirectorySearcher([ADSI]$SearchString)

$objDomain = NewObject System.DirectoryServices.DirectoryEntry

$Searcher.SearchRoot = $objDomain

$Searcher.filter="serviceprincipalname=*http*"

$Result = $Searcher.FindAll()

Foreach($obj in $Result)
{
    Foreach($prop in $obj.Properties)
    {
        $prop
    }

YOU CAN USE nslookup TO DETERMINE WHE IP OF ANY INTERESTING RESULTS TO SEE IF THEY ARE INTERNET FACING OR NOT



ACTIVE DIRECTORY AUTHENTICATION:<<<<<<<<<<<<<<<







